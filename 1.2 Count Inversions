/**
1. Question
Download the following text file:

IntegerArray.txt
This file contains all of the 100,000 integers between 1 and 100,000 (inclusive) in some order, with no integer repeated.

Your task is to compute the number of inversions in the file given, where the i^{th} row of the file indicates the i^{th}
entry of an array.

Because of the large size of this array, you should implement the fast divide-and-conquer algorithm covered in the video lectures.

The numeric answer for the given input file should be typed in the space below.

So if your answer is 1198233847, then just type 1198233847 in the space provided without any space / commas / any other punctuation 
marks. You can make up to 5 attempts, and we'll use the best one for grading.

(We do not require you to submit your code, so feel free to use any programming language you want --- just type the final numeric 
answer in the following space.)

[TIP: before submitting, first test the correctness of your program on some small test files or your own devising. Then post your 
best test cases to the discussion forums to help your fellow students!]

**/

package com.company;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {

    public static long SortAndCountInversions(int[] arr){
        //base case
        if (arr.length == 1)
            return 0;
        //left part of array
        int[] left = Arrays.copyOfRange(arr, 0, (arr.length / 2));

        //right part of array
        int[] right = Arrays.copyOfRange(arr, (arr.length/2) , arr.length);

        //divide and conquer
        long x = SortAndCountInversions(left);
        long y = SortAndCountInversions(right);

        //modify merge process of merge sort to count split inversions
        long z = MergeAndCountSplitInversion(arr,left,right);

        return x + y + z;
    }

    public static long MergeAndCountSplitInversion(int[] nums, int[] left, int[] right) {

        long count = 0;
        int i = 0; //index for left sub array
        int j = 0; //index for right sub array
        int k = 0;

        while (i < left.length && j < right.length) {
            if (left[i] < right[j]) {
                //no inversion , just put left[i] back to nums
                nums[k] = left[i];
                k++;
                i++;
            } else {
                //if the right[j] is smaller than left[i]
                //number of inversion equals to the rest number on left subarray
                //that is left.length - i
                nums[k] = right[j];
                k++;
                j++;

                count += left.length - i;
            }
        }
            //in case there are still numbers remain in left or right side, put them into original array
            while (i < left.length) {
                nums[k++] = left[i++];
            }
            while (j < right.length) {
                nums[k++] = right[j++];
            }
        return count;
        }


    //read files
    public static int[] fileToArray(String fileName) throws IOException{
        //open necessary objects to read file contents
        FileReader fileReader = new FileReader(fileName);
        BufferedReader bufferedReader = new BufferedReader(fileReader);

        //ArrayList to store the file contents
        List<Integer> entries = new ArrayList<Integer>();

        //store each line of the file in ArrayList after converting to an int
        String line = bufferedReader.readLine();
        while(line != null){
            entries.add(Integer.parseInt(line));
            line = bufferedReader.readLine();// get next line
        }

        bufferedReader.close();
        return arrayListToArray(entries);
    }

    public static int[] arrayListToArray(List<Integer> a){
        int[] result = new int[a.size()];

        //put each Integer object into int and store into new array

        for(int i = 0; i < a.size(); i++){
            result[i] = a.get(i);
        }
        return result;
    }

    public static void main(String[] args) throws IOException{
        // write your code here
        String fileName = "C:\\Users\\Xiaojun Yin\\Desktop\\ScalaProjects\\countInversion\\IntegerArray.txt";
        int[] nums = fileToArray(fileName);
        long inversions = SortAndCountInversions(nums);
        System.out.println(inversions);
    }
}



